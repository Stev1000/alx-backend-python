apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels: { app: mysql }
spec:
  replicas: 1
  selector:
    matchLabels: { app: mysql }
  template:
    metadata:
      labels: { app: mysql }
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_DATABASE
              value: messaging_db
            - name: MYSQL_USER
              value: messaging_user
            - name: MYSQL_PASSWORD
              value: messaging_pass
            - name: MYSQL_ROOT_PASSWORD
              value: rootpass
          readinessProbe:
            exec:
              command: ["sh","-c","mysqladmin ping -h 127.0.0.1 -uroot -prootpass"]
            initialDelaySeconds: 20
            periodSeconds: 5
          livenessProbe:
            exec:
              command: ["sh","-c","mysqladmin ping -h 127.0.0.1 -uroot -prootpass"]
            initialDelaySeconds: 40
            periodSeconds: 10
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-data
          emptyDir: {}   # ephemeral storage; fine for this assignment
---
apiVersion: v1
kind: Service
metadata:
  name: db           # <-- DNS name your app looks for
  labels: { app: mysql }
spec:
  type: ClusterIP
  selector: { app: mysql }
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
