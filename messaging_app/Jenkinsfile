pipeline {
    agent any
    
    environment {
        PYTHONPATH = "${WORKSPACE}/messaging_app"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Pulling source code from GitHub...'
                checkout scm
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                dir('messaging_app') {
                    echo 'Setting up Python environment in messaging_app directory...'
                    sh '''
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install pytest pytest-html pytest-cov
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    echo 'Installing project dependencies from messaging_app/requirements.txt...'
                    sh '''
                        . venv/bin/activate
                        if [ -f requirements.txt ]; then
                            echo "Found requirements.txt, installing dependencies..."
                            pip install -r requirements.txt
                        else
                            echo "No requirements.txt found in messaging_app directory"
                        fi
                    '''
                }
            }
        }
        
        stage('Create Basic Tests') {
            steps {
                dir('messaging_app') {
                    echo 'Creating basic test structure for messaging_app...'
                    sh '''
                        . venv/bin/activate
                        
                        # Create tests directory if it doesn't exist
                        if [ ! -d tests ]; then
                            mkdir -p tests
                            echo "Created tests directory"
                        fi
                        
                        # Create __init__.py if it doesn't exist
                        if [ ! -f tests/__init__.py ]; then
                            touch tests/__init__.py
                            echo "Created tests/__init__.py"
                        fi
                        
                        # Create basic test file if no tests exist
                        if [ ! -f tests/test_messaging_app.py ]; then
                            cat > tests/test_messaging_app.py << 'EOF'
import pytest
import sys
import os

def test_basic_functionality():
    """Test basic functionality"""
    assert True

def test_python_version():
    """Test Python version is 3.x"""
    assert sys.version_info.major == 3

def test_imports():
    """Test that we can import basic modules"""
    try:
        import json
        import os
        import sys
        assert True
    except ImportError:
        pytest.fail("Failed to import basic modules")

def test_messaging_app_directory():
    """Test that we're in the right directory"""
    current_dir = os.getcwd()
    assert "messaging_app" in current_dir or os.path.exists("manage.py")
EOF
                            echo "Created basic test file"
                        fi
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    echo 'Running tests with pytest in messaging_app directory...'
                    sh '''
                        . venv/bin/activate
                        
                        # Create reports directory
                        mkdir -p reports
                        
                        # Run pytest only in the tests directory
                        pytest tests/ --html=reports/report.html --self-contained-html --cov=. --cov-report=xml --cov-report=html -v
                    '''
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                dir('messaging_app') {
                    echo 'Archiving test reports...'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'reports',
                        reportFiles: 'report.html',
                        reportName: 'Pytest Report'
                    ])
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed'
        }
        success {
            echo 'Pipeline completed successfully! ✅'
        }
        failure {
            echo 'Pipeline failed! ❌ Check the console output for details.'
        }
    }
}
stage('Checkout') {
    steps {
        echo 'Pulling source code from GitHub...'
        git branch: 'master',
            credentialsId: 'your-github-credentials-id',
            url: 'https://github.com/Stev1000/alx-backend-python.git'
    }
}
stage('Install Dependencies') {
    steps {
        dir('messaging_app') {
            echo 'Installing project dependencies from requirements.txt using pip3...'
            sh '''
                pip3 install --upgrade pip
                if [ -f requirements.txt ]; then
                    pip3 install -r requirements.txt
                else
                    echo "No requirements.txt found"
                fi
            '''
        }
    }
}
